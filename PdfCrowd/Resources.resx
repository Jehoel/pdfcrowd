<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="PdfCrowdClient_InvalidFileContentTypeArgument" xml:space="preserve">
    <value>No MIME content-type was specified and the content-type could not be derived from the fileName extension.</value>
  </data>
  <data name="PdfCrowdClient_InvalidFileNameArgument" xml:space="preserve">
    <value>The fileName string provided was not a short file name (the name of a file without path information).</value>
  </data>
  <data name="PdfCrowdClient_InvalidPdfCrowdOptions" xml:space="preserve">
    <value>The PdfCrowdOptions object provided is invalid or incomplete.</value>
  </data>
  <data name="PdfCrowdErrorCode_AuthenticationError" xml:space="preserve">
    <value>The service rejected the provided username and API key. The server response message is in the Details property.</value>
  </data>
  <data name="PdfCrowdErrorCode_CouldNotParseGetRemainingTokens" xml:space="preserve">
    <value>The response from GetRemainingTokens could not be parsed as an integer value. Raw string value is in the Exception.Details property.</value>
  </data>
  <data name="PdfCrowdErrorCode_PdfGenerationFailed" xml:space="preserve">
    <value>The PDF generation failed for a reason other than a timeout. See the Details property for the respose content.</value>
  </data>
  <data name="PdfCrowdErrorCode_PdfGenerationTimeout" xml:space="preserve">
    <value>The PdfCrowd service took more than 40 seconds to generate the PDF or the generated PDF is larger than 100MiB. so the job was aborted.</value>
  </data>
  <data name="PdfCrowdErrorCode_RateLimited" xml:space="preserve">
    <value>The PdfCrowd service returned HTTP 503 indicating you have made too many requests in a small time period (i.e. you have been rate-limited).</value>
  </data>
  <data name="PdfCrowdErrorCode_ResponseWasNotProcessed" xml:space="preserve">
    <value>This exception should never happen: the Execute() callback was not executed.</value>
  </data>
  <data name="PdfCrowdErrorCode_SourceDataTooLarge" xml:space="preserve">
    <value>The size of the uploaded data exceeded 20MiB and the server returned HTTP 413 "Request entity too large".</value>
  </data>
  <data name="PdfCrowdErrorCode_UnhandledBadRequest" xml:space="preserve">
    <value>The service returned HTTP 400 indicating a bad request, but this PdfCrowd client library doesn't know why.</value>
  </data>
  <data name="PdfCrowdErrorCode_UnhandledServiceError" xml:space="preserve">
    <value>The service returned an error code which is not documented. See the Details property for the respose content.</value>
  </data>
  <data name="PdfCrowdErrorCode_UnhandledWebException" xml:space="preserve">
    <value>A WebException was raised by the internal HttpWebRequest which was unexpected and so unhandled. See the InnerException property for details.</value>
  </data>
</root>